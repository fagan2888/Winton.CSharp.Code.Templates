{
  "Strong type: string based": {
  "prefix": "strongstr",
  "description": "Strong type based on a string",
  "body": [
      "${1:public} struct ${2:$TM_FILENAME} : System.IEquatable<${2:$TM_FILENAME}>",
      "{",
      "\tprivate readonly string _value;",
      "",
      "\tpublic ${2:$TM_FILENAME}(string value)",
      "\t{",
      "\t\t_value = value;",
      "\t}",
      "",
      "\tpublic bool Equals(${2:$TM_FILENAME} other)",
      "\t{",
      "\t\treturn string.Equals(_value, other._value);",
      "\t}",
      "",
      "\tpublic override bool Equals(object obj)",
      "\t{",
      "\t\tif (ReferenceEquals(null, obj))",
      "\t\t{",
      "\t\t\treturn false;",
      "\t\t}",
      "",
      "\t\treturn obj is ${2:$TM_FILENAME} && Equals((${2:$TM_FILENAME})obj);",
      "\t}",
      "",
      "\tpublic override int GetHashCode()",
      "\t{",
      "\t\treturn _value != null ? _value.GetHashCode() : 0;",
      "\t}",
      "",
      "\tpublic override string ToString()",
      "\t{",
      "\t\treturn _value ?? \"\";",
      "\t}",
      "",
      "\tpublic static explicit operator string(${2:$TM_FILENAME} value)",
      "\t{",
      "\t\treturn value._value;",
      "\t}",
      "",
      "\tpublic static explicit operator ${2:$TM_FILENAME}(string value)",
      "\t{",
      "\t\treturn new ${2:$TM_FILENAME}(value);",
      "\t}",
      "",
      "\tpublic static bool operator ==(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.Equals(rhs);",
      "\t}",
      "",
      "\tpublic static bool operator !=(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs == rhs);",
      "\t}",
      "}"
    ]
  },
  "Strong type: value type based": {
    "prefix": "strongval",
    "description": "Strong type based on a value type",
    "body": [
      "${2:public} struct ${3:$TM_FILENAME} : System.IEquatable<${3:$TM_FILENAME}>",
      "{",
      "\tprivate readonly ${1:int} _value;",
      "",
      "\tpublic ${3:$TM_FILENAME}(${1:int} value)",
      "\t{",
      "\t\t_value = value;",
      "\t}",
      "",
      "\tpublic bool Equals(${3:$TM_FILENAME} other)",
      "\t{",
      "\t\treturn _value == other._value;",
      "\t}",
      "",
      "\tpublic override bool Equals(object obj)",
      "\t{",
      "\t\tif (ReferenceEquals(null, obj))",
      "\t\t{",
      "\t\t\treturn false;",
      "\t\t}",
      "",
      "\t\treturn obj is ${3:$TM_FILENAME} && Equals((${3:$TM_FILENAME})obj);",
      "\t}",
      "",
      "\tpublic override int GetHashCode()",
      "\t{",
      "\t\treturn _value.GetHashCode();",
      "\t}",
      "",
      "\tpublic override string ToString()",
      "\t{",
      "\t\treturn _value.ToString();",
      "\t}",
      "",
      "\tpublic static explicit operator ${1:int}(${3:$TM_FILENAME} value)",
      "\t{",
      "\t\treturn value._value;",
      "\t}",
      "",
      "\tpublic static explicit operator ${3:$TM_FILENAME}(${1:int} value)",
      "\t{",
      "\t\treturn new ${3:$TM_FILENAME}(value);",
      "\t}",
      "",
      "\tpublic static bool operator ==(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.Equals(rhs);",
      "\t}",
      "",
      "\tpublic static bool operator !=(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs == rhs);",
      "\t}",
      "}"
    ]
  },
  "Strong type (comparable): string based": {
    "prefix": "cmpstrongstr",
    "description": "Strong type based on a string implementing IComparable<> and IComparable",
    "body": [
      "${1:public} struct ${2:$TM_FILENAME} : System.IEquatable<${2:$TM_FILENAME}>, System.IComparable<${2:$TM_FILENAME}>, System.IComparable",
      "{",
      "\tprivate readonly string _value;",
      "",
      "\tpublic ${2:$TM_FILENAME}(string value)",
      "\t{",
      "\t\t_value = value;",
      "\t}",
      "",
      "\tpublic bool Equals(${2:$TM_FILENAME} other)",
      "\t{",
      "\t\treturn string.Equals(_value, other._value);",
      "\t}",
      "",
      "\tpublic override bool Equals(object obj)",
      "\t{",
      "\t\tif (ReferenceEquals(null, obj))",
      "\t\t{",
      "\t\t\treturn false;",
      "\t\t}",
      "",
      "\t\treturn obj is ${2:$TM_FILENAME} && Equals((${2:$TM_FILENAME})obj);",
      "\t}",
      "",
      "\tpublic override int GetHashCode()",
      "\t{",
      "\t\treturn _value != null ? _value.GetHashCode() : 0;",
      "\t}",
      "",
      "\tpublic override string ToString()",
      "\t{",
      "\t\treturn _value ?? \"\";",
      "\t}",
      "",
      "\tpublic int CompareTo(${2:$TM_FILENAME} other)",
      "\t{",
      "\t\treturn string.Compare(_value, other._value, System.StringComparison.Ordinal);",
      "\t}",
      "",
      "\tint System.IComparable.CompareTo(object obj)",
      "\t{",
      "\t\tif (obj is ${2:$TM_FILENAME})",
      "\t\t{",
      "\t\t\treturn CompareTo((${2:$TM_FILENAME})obj);",
      "\t\t}",
      "",
      "\t\tthrow new System.ArgumentException(\"Incorrect type.\", nameof(obj));",
      "\t}",
      "",
      "\tpublic static explicit operator string(${2:$TM_FILENAME} value)",
      "\t{",
      "\t\treturn value._value;",
      "\t}",
      "",
      "\tpublic static explicit operator ${2:$TM_FILENAME}(string value)",
      "\t{",
      "\t\treturn new ${2:$TM_FILENAME}(value);",
      "\t}",
      "",
      "\tpublic static bool operator ==(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.Equals(rhs);",
      "\t}",
      "",
      "\tpublic static bool operator !=(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs == rhs);",
      "\t}",
      "",
      "\tpublic static bool operator <(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.CompareTo(rhs) < 0;",
      "\t}",
      "",
      "\tpublic static bool operator >(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.CompareTo(rhs) > 0;",
      "\t}",
      "",
      "\tpublic static bool operator <=(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs > rhs);",
      "\t}",
      "",
      "\tpublic static bool operator >=(${2:$TM_FILENAME} lhs, ${2:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs < rhs);",
      "\t}",
      "}"
    ]
  },
  "Strong type (comparable): value type based": {
    "prefix": "cmpstrongval",
    "description": "Strong type based on a value type implementing IComparable<> and IComparable",
    "body": [
      "${2:public} struct ${3:$TM_FILENAME} : System.IEquatable<${3:$TM_FILENAME}>, System.IComparable<${3:$TM_FILENAME}>, System.IComparable",
      "{",
      "\tprivate readonly ${1:int} _value;",
      "",
      "\tpublic ${3:$TM_FILENAME}(${1:int} value)",
      "\t{",
      "\t\t_value = value;",
      "\t}",
      "",
      "\tpublic bool Equals(${3:$TM_FILENAME} other)",
      "\t{",
      "\t\treturn _value == other._value;",
      "\t}",
      "",
      "\tpublic override bool Equals(object obj)",
      "\t{",
      "\t\tif (ReferenceEquals(null, obj))",
      "\t\t{",
      "\t\t\treturn false;",
      "\t\t}",
      "",
      "\t\treturn obj is ${3:$TM_FILENAME} && Equals((${3:$TM_FILENAME})obj);",
      "\t}",
      "",
      "\tpublic override int GetHashCode()",
      "\t{",
      "\t\treturn _value.GetHashCode();",
      "\t}",
      "",
      "\tpublic override string ToString()",
      "\t{",
      "\t\treturn _value.ToString();",
      "\t}",
      "",
      "\tpublic int CompareTo(${3:$TM_FILENAME} other)",
      "\t{",
      "\t\treturn System.Collections.Generic.Comparer<${1:int}>.Default.Compare(_value, other._value);",
      "\t}",
      "",
      "\tint System.IComparable.CompareTo(object obj)",
      "\t{",
      "\t\tif (obj is ${3:$TM_FILENAME})",
      "\t\t{",
      "\t\t\treturn CompareTo((${3:$TM_FILENAME})obj);",
      "\t\t}",
      "",
      "\t\tthrow new System.ArgumentException(\"Incorrect type.\", nameof(obj));",
      "\t}",
      "",
      "\tpublic static explicit operator ${1:int}(${3:$TM_FILENAME} value)",
      "\t{",
      "\t\treturn value._value;",
      "\t}",
      "",
      "\tpublic static explicit operator ${3:$TM_FILENAME}(${1:int} value)",
      "\t{",
      "\t\treturn new ${3:$TM_FILENAME}(value);",
      "\t}",
      "",
      "\tpublic static bool operator ==(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.Equals(rhs);",
      "\t}",
      "",
      "\tpublic static bool operator !=(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs == rhs);",
      "\t}",
      "",
      "\tpublic static bool operator <(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.CompareTo(rhs) < 0;",
      "\t}",
      "",
      "\tpublic static bool operator >(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn lhs.CompareTo(rhs) > 0;",
      "\t}",
      "",
      "\tpublic static bool operator <=(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs > rhs);",
      "\t}",
      "",
      "\tpublic static bool operator >=(${3:$TM_FILENAME} lhs, ${3:$TM_FILENAME} rhs)",
      "\t{",
      "\t\treturn !(lhs < rhs);",
      "\t}",
      "}"
    ]
  }
}