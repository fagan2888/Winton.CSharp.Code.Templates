<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Strong type (comparable): string based</Title>
      <Description>Strong type based on a string implementing IComparable etc.</Description>
      <Shortcut>cmpstrongstr</Shortcut>
      <Author>Jos Hickson</Author>
      <Author>Winton</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>typename</ID>
          <ToolTip>Name of the strong type</ToolTip>
          <Function>ClassName()</Function>
          <Default>MyStrongType</Default>
        </Literal>
        <Literal>
          <ID>typevisibility</ID>
          <Default>public</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[
$typevisibility$ struct $typename$ : System.IEquatable<$typename$>, System.IComparable<$typename$>, System.IComparable
{
    private readonly string _value;

    public $typename$(string value)
    {
        _value = value;
    }

    public bool Equals($typename$ other)
    {
        return string.Equals(_value, other._value);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }

        return obj is $typename$ && Equals(($typename$)obj);
    }

    public override int GetHashCode()
    {
        return _value != null ? _value.GetHashCode() : 0;
    }

    public override string ToString()
    {
        return _value ?? "";
    }

    public int CompareTo($typename$ other)
    {
        return string.Compare(_value, other._value, System.StringComparison.Ordinal);
    }

    int System.IComparable.CompareTo(object obj)
    {
        if (obj is $typename$)
        {
            return CompareTo(($typename$)obj);
        }

        throw new System.ArgumentException("Incorrect type.", nameof(obj));
    }

    public static explicit operator string($typename$ value)
    {
        return value._value;
    }

    public static explicit operator $typename$(string value)
    {
        return new $typename$(value);
    }

    public static bool operator ==($typename$ lhs, $typename$ rhs)
    {
        return lhs.Equals(rhs);
    }

    public static bool operator !=($typename$ lhs, $typename$ rhs)
    {
        return !(lhs == rhs);
    }

    public static bool operator <($typename$ lhs, $typename$ rhs)
    {
        return lhs.CompareTo(rhs) < 0;
    }

    public static bool operator >($typename$ lhs, $typename$ rhs)
    {
        return lhs.CompareTo(rhs) > 0;
    }

    public static bool operator <=($typename$ lhs, $typename$ rhs)
    {
        return !(lhs > rhs);
    }

    public static bool operator >=($typename$ lhs, $typename$ rhs)
    {
        return !(lhs < rhs);
    }
}
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>